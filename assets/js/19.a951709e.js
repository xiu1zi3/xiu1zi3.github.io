(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{348:function(t,a,v){"use strict";v.r(a);var s=v(8),_=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#什么是进程-什么是线程"}},[t._v("什么是进程？什么是线程？")])]),a("li",[a("a",{attrs:{href:"#jvm-的主线程和-gc-线程"}},[t._v("JVM 的主线程和 GC 线程")])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"什么是进程-什么是线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程-什么是线程"}},[t._v("#")]),t._v(" 什么是进程？什么是线程？")]),t._v(" "),a("p",[t._v("用自己的话说：\n进程是一个应用程序；\n线程是一个进程中的执行单元，或者说执行场景")]),t._v(" "),a("blockquote",[a("p",[t._v("任务管理器直接看见的是进程;\nDOS 命令窗口输入 "),a("code",[t._v("java java文件名")]),t._v("，执行的也是一个进程，这在任务管理器能看见；")])]),t._v(" "),a("h3",{attrs:{id:"jvm-的主线程和-gc-线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm-的主线程和-gc-线程"}},[t._v("#")]),t._v(" JVM 的主线程和 GC 线程")]),t._v(" "),a("p",[t._v("一个进程可以启动多个线程。比如：\njava 程序至少有 2 个线程并发，一是执行 main 方法的"),a("strong",[t._v("主线程")]),t._v("、二是"),a("strong",[t._v("垃圾回收线程")])]),t._v(" "),a("p",[t._v("在 DOS 命令窗口输入"),a("code",[t._v("java java文件名")]),t._v("敲下回车之后，")]),t._v(" "),a("p",[t._v("先启动 JVM，JVM 就是一个进程；\n接下来 JVM 启动主线程，主线程是调用 main 方法的；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ice2604-navi.github.io/assets/thread.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"进程和线程的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的关系"}},[t._v("#")]),t._v(" 进程和线程的关系")]),t._v(" "),a("h3",{attrs:{id:"进程与进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程与进程"}},[t._v("#")]),t._v(" 进程与进程")]),t._v(" "),a("p",[t._v("进程与进程的内存独立不共享")]),t._v(" "),a("h3",{attrs:{id:"线程与线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与线程"}},[t._v("#")]),t._v(" 线程与线程")]),t._v(" "),a("p",[t._v("同一个进程下的线程，共享堆内存和方法区内存。栈内存相互独立，有几个线程就会有几个栈空间")]),t._v(" "),a("p",[t._v("三个线程就是三个栈空间")]),t._v(" "),a("h3",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),a("p",[t._v("那现实中的例子打比方：\n火车站售票大厅看做进程，售票窗口看成线程\n甲在窗口 1 买票，乙在窗口 2 买票，甲不需要等乙，乙不需要等甲\n这可以体现出多线程并发提升程序处理效率")]),t._v(" "),a("blockquote",[a("p",[t._v("java 程序至少有 2 个线程并发，一是执行 main 方法的"),a("strong",[t._v("主线程")]),t._v("、二是"),a("strong",[t._v("垃圾回收线程")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img2024.cnblogs.com/blog/3387348/202404/3387348-20240429205614157-615216208.png",alt:""}})]),t._v(" "),a("p",[t._v("一个比较详细的例子：\n主线程对应的栈，叫主栈。主线程调用 main 方法，如果 main 方法调用别的方法 m1，那么 m1 方法也在主线程，也在主栈。而 m1 还调用了另一个方法 m2，那么 m2 也在主线程，也在主栈")]),t._v(" "),a("p",[t._v("如果 m1 方法有一段代码是启动新线程的，那么新线程可以叫分支线程 t1。分支线程会开一个新栈，是区别于主栈的支栈。")]),t._v(" "),a("blockquote",[a("p",[t._v("main 方法结束不代表程序结束")])]),t._v(" "),a("p",[t._v("在刚刚的例子中：main 方法结束时，分支线程的方法不一定结束。也就是"),a("strong",[t._v("main 方法")]),t._v("结束，是主栈空了，只能代表主线程结束；不能代表分支线程也结束，其他的栈可能还在压栈弹栈")]),t._v(" "),a("h3",{attrs:{id:"单核-cpu-不能做到真正的多线程并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单核-cpu-不能做到真正的多线程并发"}},[t._v("#")]),t._v(" 单核 CPU 不能做到真正的多线程并发")]),t._v(" "),a("p",[t._v("首先，真正的多线程并发是，t1 正在执行 t1，t2 正在执行 t2")])])}),[],!1,null,null,null);a.default=_.exports}}]);