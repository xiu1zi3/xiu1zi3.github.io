(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{346:function(a,t,s){"use strict";s.r(t);var n=s(8),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#方法重载"}},[a._v("方法重载")])]),t("li",[t("a",{attrs:{href:"#可变参数"}},[a._v("可变参数")])]),t("li",[t("a",{attrs:{href:"#语法-label流程控制"}},[a._v("语法：label流程控制")])]),t("li",[t("a",{attrs:{href:"#java-包机制"}},[a._v("Java 包机制")])])])]),t("p"),a._v(" "),t("h3",{attrs:{id:"方法重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[a._v("#")]),a._v(" 方法重载")]),a._v(" "),t("blockquote",[t("p",[a._v("重载与重写，自己的话粗浅解释：\n方法重载是"),t("strong",[a._v("横向的多态")]),a._v("\n方法重写是"),t("strong",[a._v("纵向的覆盖")])])]),a._v(" "),t("p",[a._v("方法名相同，参数列表必须不同（也就是，参数类型、参数个数或者参数排列顺序不相同）")]),a._v(" "),t("p",[a._v("而方法返回的类型，可以相同，也可以不同")]),a._v(" "),t("h3",{attrs:{id:"可变参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[a._v("#")]),a._v(" 可变参数")]),a._v(" "),t("p",[a._v("jdk1.5 开始，Java 支持传递同类型的可变参数给一个方法")]),a._v(" "),t("p",[a._v("在方法声明中，在指定参数类型后加一个省略号(...)")]),a._v(" "),t("p",[t("strong",[a._v("可变参数在一个方法中只能存在一个，它必须是方法的最后一个参数")])]),a._v(" "),t("p",[a._v("这样，传进来的参数是元素类型是省略号前的数据类型的数组")]),a._v(" "),t("h4",{attrs:{id:"语法-用户交互scanner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法-用户交互scanner"}},[a._v("#")]),a._v(" 语法：用户交互Scanner")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Scanner s = new Scanner(System.in);\n")])])]),t("p",[t("code",[a._v("Scanner")]),a._v("类读入字符串："),t("code",[a._v("next()")]),a._v("和"),t("code",[a._v("nextLine()")]),a._v("；\n读入前判断是否还有输入的数据"),t("code",[a._v("hasNext()")]),a._v("、"),t("code",[a._v("hasNextLine()")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"语法-label流程控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法-label流程控制"}},[a._v("#")]),a._v(" 语法：label流程控制")]),a._v(" "),t("p",[a._v("java 没有"),t("code",[a._v("goto")]),a._v("关键字，java 使用的是标签(label)：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("outer"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("xxx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("xxx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("xxx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("continue")]),a._v(" outer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    xxx\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"java-包机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-包机制"}},[a._v("#")]),a._v(" Java 包机制")]),a._v(" "),t("p",[a._v("包的本质就是文件夹\n一般利用公司域名倒置作为包名\n"),t("code",[a._v("*")]),a._v("代表通配符，会导入该包下所有的类")])])}),[],!1,null,null,null);t.default=e.exports}}]);