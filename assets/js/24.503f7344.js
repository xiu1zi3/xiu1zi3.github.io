(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{353:function(t,e,s){"use strict";s.r(e);var a=s(8),v=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#sleep"}},[t._v("sleep()")])]),e("li",[e("a",{attrs:{href:"#sleep的静态特性"}},[t._v("sleep的静态特性")])]),e("li",[e("a",{attrs:{href:"#回顾-异常"}},[t._v("回顾：异常")])]),e("li",[e("a",{attrs:{href:"#中断线程的睡眠"}},[t._v("中断线程的睡眠")])])])]),e("p"),t._v(" "),e("h3",{attrs:{id:"sleep"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sleep"}},[t._v("#")]),t._v(" sleep()")]),t._v(" "),e("p",[t._v("当前线程进入休眠，进入“阻塞状态”。")]),t._v(" "),e("p",[t._v("也就是，放弃占有 CPU 时间片，让给其它线程使用。")]),t._v(" "),e("p",[e("strong",[t._v("这行代码出现在哪个线程中，哪个线程就要休眠")])]),t._v(" "),e("p",[t._v("参数是 long(8 字节整数) 毫秒数。源代码声明时 static void")]),t._v(" "),e("blockquote",[e("p",[t._v("Java 所有的整数数据类型都是有符号的，不存在 unsigned 无符号数据类型")])]),t._v(" "),e("p",[t._v("例子结合代码理解。\n有 2 个代码例子展示了不同的功能：")]),t._v(" "),e("ol",[e("li",[t._v("for 循环内，按一定间隔做某事")]),t._v(" "),e("li",[t._v("线程与线程间停顿足够久的时间，线程顺序执行，不再是交错执行啦")])]),t._v(" "),e("h3",{attrs:{id:"sleep的静态特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sleep的静态特性"}},[t._v("#")]),t._v(" sleep的静态特性")]),t._v(" "),e("p",[t._v("sleep 代码出现在哪个线程中，哪个线程就休眠")]),t._v(" "),e("p",[t._v("直觉上，应该让调用 sleep 方法线程对象休眠才对")]),t._v(" "),e("p",[t._v("但其实"),e("code",[t._v("线程.sleep(某时间)")]),t._v("等价于"),e("code",[t._v("Thread.sleep(某时间)")]),t._v("！")]),t._v(" "),e("blockquote",[e("p",[t._v("这行代码出现在 A 线程中，A 线程就会进入休眠。")]),t._v(" "),e("p",[t._v("这行代码出现在 B 线程中，B 线程就会进入休眠。")])]),t._v(" "),e("p",[e("strong",[t._v("一定是让 sleep 代码执行时当前正在执行的线程休眠")]),t._v("，也就是与调用 sleep 的线程无关，只与 sleep 代码位置有关")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意静态特性")]),t._v(" "),e("p",[t._v('就算是创建对象,然后"对象."的方式去调,他跟你这个对象也没有关系,\n'),e("strong",[t._v("在执行的时候还是会转换成 Thread.sleep()方法去执行")]),t._v("，因为 sleep 是静态方法!")])]),t._v(" "),e("h3",{attrs:{id:"回顾-异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回顾-异常"}},[t._v("#")]),t._v(" 回顾：异常")]),t._v(" "),e("blockquote",[e("p",[t._v("对于子类重写的父类的方法，不能比父类的该方法抛出更宽泛更多的异常")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnable")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Runnable 的 run 方法 源代码不存在抛出异常。所以，\n在子类 MyRunnable 重写覆盖 父类 Runnable 的 run 方法时\n对 run 当中的异常不能抛出，只能 try catch")]),t._v(" "),e("blockquote",[e("p",[t._v("不过，对子类特有的方法来说，想抛出就可以抛出")])]),t._v(" "),e("p",[t._v("比如 MyRunnable 有不是从 Runnable 继承来的方法 B，方法 B 可以抛出异常。在 run 方法里调用方法 B，是完全可以的")]),t._v(" "),e("h3",{attrs:{id:"中断线程的睡眠"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中断线程的睡眠"}},[t._v("#")]),t._v(" 中断线程的睡眠")]),t._v(" "),e("h4",{attrs:{id:"interrupt-异常机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-异常机制"}},[t._v("#")]),t._v(" interrupt + 异常机制")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("线程对象.interrupt(); //干扰，表示一盆冷水过去\n")])])]),e("p",[t._v("使得重写的 run 方法当中，\n"),e("code",[t._v("try {Thread.sleep(某时间)}")]),t._v(" 被破坏，\n进入 catch，抓到"),e("code",[t._v("(InterruptedException e)")]),t._v("，\n执行了"),e("code",[t._v("e.printStackTrace()")]),t._v("打印出异常信息")]),t._v(" "),e("p",[t._v("如果不想打印出来异常信息，那么只注释就可以")])])}),[],!1,null,null,null);e.default=v.exports}}]);