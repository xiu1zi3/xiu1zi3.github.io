(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{337:function(a,t,s){"use strict";s.r(t);var n=s(8),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#类与对象"}},[a._v("类与对象")]),t("ul",[t("li",[t("a",{attrs:{href:"#回顾"}},[a._v("回顾")])]),t("li",[t("a",{attrs:{href:"#类、对象"}},[a._v("类、对象")])]),t("li",[t("a",{attrs:{href:"#oop-三大特征"}},[a._v("OOP 三大特征")])])])]),t("li",[t("a",{attrs:{href:"#构造方法"}},[a._v("构造方法")]),t("ul",[t("li",[t("a",{attrs:{href:"#语法格式"}},[a._v("语法格式")])]),t("li",[t("a",{attrs:{href:"#构造方法的参数"}},[a._v("构造方法的参数")])])])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"类与对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类与对象"}},[a._v("#")]),a._v(" 类与对象")]),a._v(" "),t("h3",{attrs:{id:"回顾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回顾"}},[a._v("#")]),a._v(" 回顾")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("1 对多")]),a._v("：一个 Java 源文件中可以有多个 class")]),a._v(" "),t("li",[a._v("public class 并不是必须要有的")]),a._v(" "),t("li",[a._v("一个 class 文件对应生成一个.class 字节码文件")]),a._v(" "),t("li",[t("strong",[a._v("至多 1")]),a._v("：如果源文件中要定义公共的类(public class),有且只能有一个,并且该源文件的名称一定要与类名一致")]),a._v(" "),t("li",[t("strong",[a._v("1 对 1")]),a._v("：每一个 class 中都可以编写 main 方法,都可设定程序的入口")])]),a._v(" "),t("h3",{attrs:{id:"类、对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类、对象"}},[a._v("#")]),a._v(" 类、对象")]),a._v(" "),t("p",[a._v("类是构造对象的模板或蓝图\n什么是对象？\n把类想象成月饼模具，对象就是模具压出来的月饼\n由类(Class)构造对象(Object)的过程，就叫做创建类的实例(Instance)")]),a._v(" "),t("h4",{attrs:{id:"面向对象和面向过程的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别"}},[a._v("#")]),a._v(" 面向对象和面向过程的区别")]),a._v(" "),t("p",[t("strong",[a._v("面向过程")]),a._v("：是分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发")]),a._v(" "),t("p",[t("strong",[a._v("面向对象")]),a._v("：是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了"),t("strong",[a._v("描述某个事物在解决整个问题的过程中所发生的行为")]),a._v("。面向对象有封装、继承、多态的特性，所以"),t("strong",[a._v("易维护、易复用、易扩展")]),a._v("。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低")]),a._v(" "),t("blockquote",[t("p",[a._v("和 Java 一样，C#也是面向对象。而 JS 是基于对象")])]),a._v(" "),t("h3",{attrs:{id:"oop-三大特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oop-三大特征"}},[a._v("#")]),a._v(" OOP 三大特征")]),a._v(" "),t("p",[a._v("面向对象三大特征：封装 继承 多态")]),a._v(" "),t("h2",{attrs:{id:"构造方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[a._v("#")]),a._v(" 构造方法")]),a._v(" "),t("p",[a._v("构造方法，也叫构造函数/构造器")]),a._v(" "),t("p",[a._v("一句话，指定好创建对象的内容。调用构造方法---\x3e 创建对象")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("blockquote",[t("p",[a._v("如果没有定义构造方法，系统默认给该类提供一个无参数的构造方法")])]),a._v(" "),t("h3",{attrs:{id:"语法格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法格式"}},[a._v("#")]),a._v(" 语法格式")]),a._v(" "),t("p",[a._v("一般方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("修饰符列表"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 返回值类型 方法名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("形式参数列表"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    方法体\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("构造方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("修饰符列表"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 方法名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("形式参数列表"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    方法体\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"构造方法的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法的参数"}},[a._v("#")]),a._v(" 构造方法的参数")]),a._v(" "),t("ul",[t("li",[a._v("无参数的构造方法")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ul",[t("li",[a._v("含参数的构造方法")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("无惨构造方法和有参构造方法的区别:")]),a._v(" "),t("ul",[t("li",[a._v("无参构造方法会赋默认值")]),a._v(" "),t("li",[a._v("有参构造方法将变量初始化赋值!(多个有参构造方法联系到方法重载!)")])])])}),[],!1,null,null,null);t.default=r.exports}}]);